# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Build'
  pool:
    # Select here which plattform to build on. The resulting executable will be targeting for this plattform
    #vmImage: 'Ubuntu-latest'
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: nose2 -v --junit-xml --junit-xml-path nosetests.xml
    displayName: 'Run unit tests'
  - script: nose2 -v --with-coverage --coverage ./torpydo --coverage-report xml
    displayName: 'Create Code Coverage'
  - script: behave --junit 
    displayName: 'Run behave tests'
    
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
      testResultsFormat: JUnit
    displayName: 'Publish Test Results'
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: coverage.xml
      #pathToSources: # Optional
      #reportDirectory: # Optional
      #additionalCodeCoverageFiles: # Optional
      #failIfCoverageEmpty: false # Optional

  - script: python -m pip install pyinstaller
    displayName: 'Install pyinstaller'

  - script: pyinstaller --onefile start.py --name torpydo.exe 
    displayName: 'Build execution file'
    
  # To include additional files needed to run the executable, copy them in the dist folder
  #- task: CopyFiles@2
  #  inputs:
  #    Contents: '<file pattern>'
  #    TargetFolder: 'dist'
  #    OverWrite: true
      
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: 'dist'
    condition: succeededOrFailed()
